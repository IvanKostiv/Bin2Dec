{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","Typography","App","formRef","React","createRef","convertBinToDec","values","current","setFieldsValue","dec","Number","parseInt","bin","className","ref","this","name","layout","onFinish","requiredMark","level","Item","label","hasFeedback","rules","required","message","validator","rule","value","match","Promise","reject","resolve","placeholder","readOnly","type","htmlType","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wTAIQA,G,OAAUC,IAAVD,OA2DOE,E,4MAxDbC,QAAUC,IAAMC,Y,EAEhBC,gBAAkB,SAACC,GACjB,EAAKJ,QAAQK,QAAQC,eAAe,CAClCC,IAAKC,OAAOC,SAASL,EAAOM,IAAK,M,uDAKnC,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CACEC,IAAKC,KAAKb,QACVW,UAAU,eACVG,KAAK,UACLC,OAAO,WACPC,SAAUH,KAAKV,gBACfc,cAAc,GAEd,kBAACpB,EAAD,CAAOqB,MAAO,GAAd,WACA,kBAAC,IAAKC,KAAN,CACEC,MAAM,UACNN,KAAK,MACLO,aAAW,EACXC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BAEX,kCAAS,CACPC,UADO,SACGC,EAAMC,GACd,OAAiC,OAA7BA,EAAMC,MAAM,aACPC,QAAQC,OAAO,sBAEjBD,QAAQE,eAKrB,kBAAC,IAAD,CAAOC,YAAY,mBAErB,kBAAC,IAAKb,KAAN,CAAWC,MAAM,WAAWN,KAAK,OAC/B,kBAAC,IAAD,CAAOkB,YAAY,iBAAiBC,UAAU,KAGhD,kBAAC,IAAKd,KAAN,KACE,kBAAC,IAAD,CAAQe,KAAK,UAAUC,SAAS,UAAhC,kB,GA/CMC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.ce0c42c2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Input, Button, Typography, Form } from \"antd\";\nimport \"./App.css\";\n\nconst { Title } = Typography;\n\nclass App extends Component {\n  formRef = React.createRef();\n\n  convertBinToDec = (values) => {\n    this.formRef.current.setFieldsValue({\n      dec: Number.parseInt(values.bin, 2),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          ref={this.formRef}\n          className=\"form-wrapper\"\n          name=\"bin2dec\"\n          layout=\"vertical\"\n          onFinish={this.convertBinToDec}\n          requiredMark={false}\n        >\n          <Title level={2}>Bin2Dec</Title>\n          <Form.Item\n            label=\"Binary:\"\n            name=\"bin\"\n            hasFeedback\n            rules={[\n              {\n                required: true,\n                message: \"Please, enter binary number\",\n              },\n              ({}) => ({\n                validator(rule, value) {\n                  if (value.match(/^[0-1]+$/g) === null) {\n                    return Promise.reject(\"Only 0 and 1 digit\");\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n          >\n            <Input placeholder=\"binary number\" />\n          </Form.Item>\n          <Form.Item label=\"Decimal:\" name=\"dec\">\n            <Input placeholder=\"decimal number\" readOnly={true} />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              convert\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}